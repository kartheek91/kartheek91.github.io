<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-03T21:00:07+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Learn By Doing</title><subtitle>This site is created to share my learnings.Please let me know if you have any doubts regarding my postings.</subtitle><entry><title type="html">Apache-NiFi-Series-1 GetFile and PutFile Processors</title><link href="http://localhost:4000/2020/08/03/apache-nifi-series-1-getfile-and-putfile-processors.html" rel="alternate" type="text/html" title="Apache-NiFi-Series-1 GetFile and PutFile Processors" /><published>2020-08-03T21:00:06+05:30</published><updated>2020-08-03T21:00:06+05:30</updated><id>http://localhost:4000/2020/08/03/apache-nifi-series-1-getfile-and-putfile-processors</id><content type="html" xml:base="http://localhost:4000/2020/08/03/apache-nifi-series-1-getfile-and-putfile-processors.html">&lt;h1 id=&quot;apache-nifi-getfile-and-putfile-processors&quot;&gt;Apache NiFi GetFile and PutFile Processors&lt;/h1&gt;
&lt;p&gt;Hi, In this post I’ll discuss on how to leverage  &lt;strong&gt;&lt;em&gt;Get and Put File Processors&lt;/em&gt;&lt;/strong&gt; using  &lt;strong&gt;&lt;em&gt;Apache-NiF&lt;/em&gt;i&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Apache NiFi&lt;/em&gt;&lt;/strong&gt; is a real time data ingestion platform, which can transfer and manage data transfer between different sources and destination systems. It supports a wide variety of data formats like logs, geo location data, social feeds, etc. It also supports many protocols like SFTP, HDFS, and KAFKA, etc. This support to wide variety of data sources and protocols making this platform popular in many IT organizations.&lt;/p&gt;

&lt;p&gt;So we will take two processors i.e. GetFile Processor, PutFile Processor and will try to establish relationship between two procesors. Our goal is to move the files from one location to another.&lt;/p&gt;

&lt;h1 id=&quot;getfile-processor&quot;&gt;GetFile Processor&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;GetFile Processor&lt;/em&gt;&lt;/strong&gt;  is used to fetch files of a specific format from a specific directory. It also provides other options to user for more control on fetching. We will discuss it in properties section below.So now we will add this processor.&lt;/p&gt;

&lt;h1 id=&quot;steps-to-add-this-getfile-processor-to-the-workspace&quot;&gt;Steps to add this GetFile Processor to the WorkSpace&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Drag the processor icon from the  menu and you will see the following window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/addProcessor.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now we need to add GetFileProcessor, go to the top right corner and  in filter box type &lt;strong&gt;GetFile&lt;/strong&gt; and  double click on the result then you willl processor getting added to the workspace.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/getFile1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now we will set  &lt;strong&gt;&lt;em&gt;GetFile Properties&lt;/em&gt;&lt;/strong&gt;  which is important and without we can’t start the processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/getFile_Properties.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;So the proeprties which are in bold are the mandatory properties, we need to set values for those properties without which we can’t      start the processor. Let’s fill the properties and click on the &lt;strong&gt;Apply&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/getFile_Configuration.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;putfile-processor&quot;&gt;PutFile Processor&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;PutFile Processor&lt;/em&gt;&lt;/strong&gt; The PutFile processor is used to store the file from the data flow to a specific location. We will discuss it in properties section below.So now we will add this processor.&lt;/p&gt;

&lt;h1 id=&quot;steps-to-add-this-putfile-processor-to-the-workspace&quot;&gt;Steps to add this PutFile Processor to the WorkSpace&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We can replicate the above mentioned steps and try to  filter it out by &lt;strong&gt;PutFilter&lt;/strong&gt; double click on it and you will end up with this screen.
&lt;img src=&quot;/getFile_putFile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;So the proeprties which are in bold are the mandatory properties, we need to set values for those properties without which we can’t      start the processor. Let’s fill the properties in properties tab and don’t forget to check  &lt;strong&gt;&lt;em&gt;sucess and failure&lt;/em&gt;&lt;/strong&gt;  in setting tab.&lt;/li&gt;
  &lt;li&gt;Now click  &lt;strong&gt;Apply&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/putfile_property.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;create-connection&quot;&gt;Create Connection&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Now we will create connection between two processors and we will end up with the following screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/createconnection.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now we go to the input directory and I have copied &lt;strong&gt;100 pdf  files&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/input_directory.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now we are ready to start the processors, in order to start the processors right click on the workspace and click start. Then we are are good to go. For our understanding i will start processors individually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/input_processor_start.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;So now we will see 100 items in the queue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/quee100.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now we will start &lt;strong&gt;Put File Processor&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/putoutput.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finally now we will check  in the &lt;strong&gt;Output Directory&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/output_direcotry.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So this how we will leverage &lt;strong&gt;GetFile and PutFile Processors&lt;/strong&gt;  using &lt;strong&gt;Apache NiFi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Kartheek Gummaluri&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="APACHE" /><category term="NIFI" /><summary type="html">Apache NiFi GetFile and PutFile Processors Hi, In this post I’ll discuss on how to leverage Get and Put File Processors using Apache-NiFi</summary></entry><entry><title type="html">Convert Emojis to text and Emoticons to text using emot package</title><link href="http://localhost:4000/dev/2020/08/03/convert-emojis-to-text-and-emoticons-to-text-using-emot-package.html" rel="alternate" type="text/html" title="Convert Emojis to text and Emoticons to text using emot package" /><published>2020-08-03T17:47:06+05:30</published><updated>2020-08-03T17:47:06+05:30</updated><id>http://localhost:4000/dev/2020/08/03/convert-emojis-to-text-and-emoticons-to-text-using-emot-package</id><content type="html" xml:base="http://localhost:4000/dev/2020/08/03/convert-emojis-to-text-and-emoticons-to-text-using-emot-package.html">Here I will explain you how to convert emojis and emoticons to text.
```
data_path = &quot;D:/nlp/HelperCodes/&quot;
import sys
import re
import emot

sys.path.append(data_path)
from text_prep_config import UNICODE_EMO, EMOTICONS

def convert_emojis(text):
    for emot in UNICODE_EMO:
#        print(&quot;_&quot;.join(UNICODE_EMO[emot].replace(&quot;,&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;).split()))
        text = re.sub(r'(' + emot + ')', &quot;_&quot;.join(UNICODE_EMO[emot].replace(&quot;,&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;).split()), text)
    return text

def convert_emoticons(text):
    for emot in EMOTICONS:
        text = re.sub(u'('+emot+')', &quot;_&quot;.join(EMOTICONS[emot].replace(&quot;,&quot;,&quot;&quot;).split()), text)
    return text

def remove_emoji(string):
  emoji_pattern = re.compile(&quot;[&quot;
                       u&quot;\U0001F600-\U0001F64F&quot;  # emoticons
                       u&quot;\U0001F300-\U0001F5FF&quot;  # symbols &amp; pictographs
                       u&quot;\U0001F680-\U0001F6FF&quot;  # transport &amp; map symbols
                       u&quot;\U0001F1E0-\U0001F1FF&quot;  # flags (iOS)
                       u&quot;\U00002702-\U000027B0&quot;
                       u&quot;\U000024C2-\U0001F251&quot;
                       &quot;]+&quot;, flags=re.UNICODE)
  return emoji_pattern.sub(r'', string)

def remove_emoticons(text):
    emoticon_pattern = re.compile(u'(' + u'|'.join(k for k in EMOTICONS) + u')')
    return emoticon_pattern.sub(r'', text)

emoticons_text = &quot;Hello :-) :-)&quot;
emojis_text = &quot;Game is on 🔥&quot;

print(&quot;CONVERTING Emojis to Text:\n*\nInput: &quot; + emojis_text +  &quot;\n&quot;+ &quot;Output: &quot; + convert_emojis(emojis_text) + &quot;\n*&quot;)
print(&quot;CONVERTING Emoticons to Text:\n*\nInput: &quot; + emoticons_text +  &quot; \n&quot; + &quot;Output: &quot; + convert_emoticons(emoticons_text) + &quot;\n*&quot;)
print(&quot;Removing Emoticons in the Text:\n*\nInput: &quot; + emoticons_text +  &quot; \n&quot; + &quot;Output: &quot; + remove_emoticons(emoticons_text)+ &quot;\n*&quot;)
print(&quot;Removing  Emojis in the Text:\nInput: &quot; + emojis_text +  &quot; \n&quot; + &quot;Output: &quot; + remove_emoji(emojis_text))

#Now we will use emot package that is designed by NeelShah

print(emot.emoji(emojis_text))
print(emot.emoticons(emoticons_text))

for code in emot.UNICODE_EMO:
    print( code  + emot.UNICODE_EMO[code] + &quot;\n&quot;)
    
for code in emot.EMOTICONS:
    print( code  + &quot;=&quot; +  emot.EMOTICONS[code] + &quot;\n&quot;)**
```
So here we  wrote a method called **convert_emojis** where it will accept a string and you will get the text corresponding to emoji and here is the output.</content><author><name></name></author><category term="Dev" /><category term="Python" /><summary type="html">Here I will explain you how to convert emojis and emoticons to text. ``` data_path = “D:/nlp/HelperCodes/” import sys import re import emot</summary></entry><entry><title type="html">Introduction to “Did You Mean “ feature in ElasticSearch</title><link href="http://localhost:4000/2019/04/20/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Introduction to “Did You Mean “ feature in ElasticSearch" /><published>2019-04-20T13:12:15+05:30</published><updated>2019-04-20T13:12:15+05:30</updated><id>http://localhost:4000/2019/04/20/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/2019/04/20/welcome-to-jekyll.html">In this post I will explain you the different types of suggestors that elasticsearch is providing and I will give you brief about &quot;Completion Suggestor&quot;.

There are 4 types of suggestors
* Term Suggestor
* Phrase Suggestor
* Completion Suggestor
* Context Suggestor

So in recent times I have used a completion suggestor in one of my projects.The completion suggester provides auto-complete/search-as-you-type functionality. This is a navigational feature to guide users to relevant results as they are typing, improving search precision. It is not meant for spell correction or did-you-mean functionality like the term or phrase suggester

I will expalin with a small example in understand better and here is the sample mapping

```
curl -XPUT &quot;http://localhost:9200/sample&quot; -H 'Content-Type: application/json' -d'
{
  &quot;mappings&quot;: {
    &quot;doc&quot;: {
      &quot;properties&quot;: {
        &quot;namesuggest&quot;: {
          &quot;type&quot;: &quot;completion&quot;,
          &quot;analyzer&quot;: &quot;standard&quot;,
          &quot;preserve_separators&quot;: true,
          &quot;preserve_position_increments&quot;: true,
          &quot;max_input_length&quot;: 50
        },
        &quot;fullname&quot;: {
          &quot;type&quot;: &quot;text&quot;
        }
      }
    }
  }
}'
```

In the above mapping we defined completion suggestor and we have used standard analyzer,it provides grammar based tokenization (based on the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29) and works well for most languages.

Now we index few documents

```
PUT sample/doc/1?refresh
{
  &quot;namesuggest&quot;: [
    {
      &quot;input&quot;: &quot;Kartheek Gummaluri&quot;,
      &quot;weight&quot;: 10
    }
  ],
  &quot;fullname&quot;: &quot;Kartheek Gummaluri&quot;
}

PUT sample/doc/2?refresh
{
  &quot;namesuggest&quot;: [
    {
      &quot;input&quot;: &quot;Kiran Sangita&quot;,
      &quot;weight&quot;: 6
    }
  ],
  &quot;fullname&quot;: &quot;Kiran Sangita&quot;
}
```


So in the above document we have parameter called weight, so weight is used as relevancy tuning of search results.This helps us  which one needs to bubble up first.

Now we will write a sample query to get better idea

```
curl -XPOST &quot;http://localhost:9200/sample/_search?pretty&quot; -H 'Content-Type: application/json' -d'
{
  &quot;suggest&quot;: {
    &quot;namesuggest&quot;: {
      &quot;prefix&quot;: &quot;k&quot;,
      &quot;completion&quot;: {
        &quot;field&quot;: &quot;namesuggest&quot;
      }
    }
  }
}'
```

So based on the above documents document-1 needs to be bubble up first because it has a weight of 10 where as the document -2 as weight 9.It will bubble up second.Please find results below.

```
{
  &quot;took&quot; : 8,
  &quot;timed_out&quot; : false,
  &quot;_shards&quot; : {
    &quot;total&quot; : 5,
    &quot;successful&quot; : 5,
    &quot;skipped&quot; : 0,
    &quot;failed&quot; : 0
  },
  &quot;hits&quot; : {
    &quot;total&quot; : 0,
    &quot;max_score&quot; : 0.0,
    &quot;hits&quot; : [ ]
  },
  &quot;suggest&quot; : {
    &quot;namesuggest&quot; : [
      {
        &quot;text&quot; : &quot;k&quot;,
        &quot;offset&quot; : 0,
        &quot;length&quot; : 1,
        &quot;options&quot; : [
          {
            &quot;text&quot; : &quot;Kartheek Gummaluri&quot;,
            &quot;_index&quot; : &quot;sample&quot;,
            &quot;_type&quot; : &quot;doc&quot;,
            &quot;_id&quot; : &quot;1&quot;,
            &quot;_score&quot; : 10.0,
            &quot;_source&quot; : {
              &quot;namesuggest&quot; : [
                {
                  &quot;input&quot; : &quot;Kartheek Gummaluri&quot;,
                  &quot;weight&quot; : 10
                }
              ],
              &quot;fullname&quot; : &quot;Kartheek Gummaluri&quot;
            }
          },
          {
            &quot;text&quot; : &quot;Kiran Sangita&quot;,
            &quot;_index&quot; : &quot;sample&quot;,
            &quot;_type&quot; : &quot;doc&quot;,
            &quot;_id&quot; : &quot;2&quot;,
            &quot;_score&quot; : 6.0,
            &quot;_source&quot; : {
              &quot;namesuggest&quot; : [
                {
                  &quot;input&quot; : &quot;Kiran Sangita&quot;,
                  &quot;weight&quot; : 6
                }
              ],
              &quot;fullname&quot; : &quot;Kiran Sangita&quot;
            }
          }
        ]
      }
    ]
  }
}
```

Thanks and stay tuned for further updates.</content><author><name></name></author><category term="ELasticSearch" /><summary type="html">In this post I will explain you the different types of suggestors that elasticsearch is providing and I will give you brief about “Completion Suggestor”.</summary></entry></feed>