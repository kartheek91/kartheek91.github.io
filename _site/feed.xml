<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-01T22:24:12+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Learn By Doing</title><subtitle>This site is created to share my learnings.Please let me know if you have any doubts regarding my postings.</subtitle><entry><title type="html">MY PLANS FOR YEAR 2021</title><link href="http://localhost:4000/2021/01/01/my-plans-for-year-2021.html" rel="alternate" type="text/html" title="MY PLANS FOR YEAR 2021" /><published>2021-01-01T22:00:46+05:30</published><updated>2021-01-01T22:00:46+05:30</updated><id>http://localhost:4000/2021/01/01/my-plans-for-year-2021</id><content type="html" xml:base="http://localhost:4000/2021/01/01/my-plans-for-year-2021.html">&lt;h2 id=&quot;happy-new-year-2021&quot;&gt;Happy New Year 2021&lt;/h2&gt;
&lt;p&gt;First of all, Thank you for all  following my blog and showing interest in reading my articles. In this blog post, I would like to discuss my plans for the year 2021. I’ll work hard to accomplish all my goals mentioned here and share my learnings.&lt;/p&gt;

&lt;h3 id=&quot;here-is-a-brief-list-of-todos-that-i-am-planning-to-accomplish-in-2021&quot;&gt;Here is a brief list of todo’s that I am planning to accomplish in 2021&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Increase my blogging frequency&lt;/strong&gt;: I started blogging since 2 years, but i was like passive participant and I used to create posts perodically due to my work. I understand the value and importance of contributing to the community. So this year I again want to get in touch with developer communities and my fellow developers. So my target for this year and upcoming years is to post at least one article( of course useful ones) per week.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Learn Apache Kafka in depth&lt;/strong&gt;:&lt;strong&gt;A&lt;/strong&gt;pache Kafka is a community distributed event streaming platform capable of handling trillions of events a day. Initially conceived as a messaging queue, Kafka is based on an abstraction of a distributed commit log. Since being created and open sourced by LinkedIn in 2011, Kafka has quickly evolved from messaging queue to a full-fledged event streaming platform.I have hands-on experience but I need to get my hands dirty in depth on  KsqlDb, Kafka-Api, Kafka-Cluser Architecture.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Use at least one programming language other than the ones which I frequently use&lt;/strong&gt;: Since 4  years I’m  working on Microsoft technologies and NoSql databases like ELK stack, Couchbase and MongoDb, I did write code in other programming languages like “Python” and did develop a good project using these technologies. But I was like a Nightwatchman ( If you follow cricket, especially test matches) working on these technologies. Of course, I strongly believe that Programming language should never be a barrier to implement ideas or thoughts for a good developer. At any given point of time, I believe that a good developer should be capable of writing code in any programming language. But of course there is a slight difference between writing code in a new programming language and excelling in that programming language. So I decided to learn and excel in “Python”. Reason for choosing Python is for 4 years I am using C# which is statically typed and I would like to the taste the dynamic nature of python now. Also, I am planning to learn about data engineering, Python provides some packages in those areas like NumPy, SciPi and many more. Also, another reason is I would like to explore Apache Spark and using PySpark I’ll be able to write map-reduce functions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the list is never ending but I would like to focus on these technologies and goals for this year and If time permits, I’ll be focusing on some other topics like exploring AWS cloud solutions such as AWS Athena, Azure cloud solutions such as Application Gateways, Azure Bastion etc and Red Hat OpenShift which is an open source container application platform based on the Kubernetes container orchestraton.&lt;/p&gt;

&lt;p&gt;Last but on the least I would like to thank my well wishers, mentors who has always been my constant support starting with my mentors Kiran Sangita, Siva AVKD, Pavan Arya, Sumath AWS, Aravind ELK and list continues……….&lt;/p&gt;

&lt;p&gt;And once again I wish everyone a Happy New Year. Please do post your valuable suggestions, questions, and learnings, and let’s try to learn as much as possible this year.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Kartheek Gummaluri&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Happy New Year 2021 First of all, Thank you for all following my blog and showing interest in reading my articles. In this blog post, I would like to discuss my plans for the year 2021. I’ll work hard to accomplish all my goals mentioned here and share my learnings.</summary></entry><entry><title type="html">Apache-NiFi-Series-1 GetFile and PutFile Processors</title><link href="http://localhost:4000/2020/08/03/apache-nifi-series-1-getfile-and-putfile-processors.html" rel="alternate" type="text/html" title="Apache-NiFi-Series-1 GetFile and PutFile Processors" /><published>2020-08-03T21:00:06+05:30</published><updated>2020-08-03T21:00:06+05:30</updated><id>http://localhost:4000/2020/08/03/apache-nifi-series-1-getfile-and-putfile-processors</id><content type="html" xml:base="http://localhost:4000/2020/08/03/apache-nifi-series-1-getfile-and-putfile-processors.html"># Apache NiFi GetFile and PutFile Processors
Hi, In this post I’ll discuss on how to leverage  ***Get and Put File Processors*** using  ***Apache-NiF*i**

# Introduction 
***Apache NiFi*** is a real time data ingestion platform, which can transfer and manage data transfer between different sources and destination systems. It supports a wide variety of data formats like logs, geo location data, social feeds, etc. It also supports many protocols like SFTP, HDFS, and KAFKA, etc. This support to wide variety of data sources and protocols making this platform popular in many IT organizations.

So we will take two processors i.e. GetFile Processor, PutFile Processor and will try to establish relationship between two procesors. Our goal is to move the files from one location to another.

#  GetFile Processor
***GetFile Processor***  is used to fetch files of a specific format from a specific directory. It also provides other options to user for more control on fetching. We will discuss it in properties section below.So now we will add this processor.

# Steps to add this GetFile Processor to the WorkSpace
* Drag the processor icon from the  menu and you will see the following window.
	
![]({{ 'addProcessor.png' | relative_url }})

* Now we need to add GetFileProcessor, go to the top right corner and  in filter box type **GetFile** and  double click on the result then you willl processor getting added to the workspace.

![]({{ 'getFile1.png' | relative_url }})

*  Now we will set  ***GetFile Properties***  which is important and without we can't start the processor.

![]({{ 'getFile_Properties.png' | relative_url }})

* So the proeprties which are in bold are the mandatory properties, we need to set values for those properties without which we can't      start the processor. Let's fill the properties and click on the **Apply** button.

![]({{ 'getFile_Configuration.png' | relative_url }})

#  PutFile Processor
***PutFile Processor*** The PutFile processor is used to store the file from the data flow to a specific location. We will discuss it in properties section below.So now we will add this processor.

# Steps to add this PutFile Processor to the WorkSpace
* We can replicate the above mentioned steps and try to  filter it out by **PutFilter** double click on it and you will end up with this screen.
![]({{ 'getFile_putFile.png' | relative_url }})

* So the proeprties which are in bold are the mandatory properties, we need to set values for those properties without which we can't      start the processor. Let's fill the properties in properties tab and don't forget to check  ***sucess and failure***  in setting tab.
* Now click  **Apply** button.

![]({{ 'putfile_property.png' | relative_url }})
#  Create Connection 
*  Now we will create connection between two processors and we will end up with the following screen.

![]({{ 'createconnection.png' | relative_url }})

* Now we go to the input directory and I have copied **100 pdf  files**.

![]({{ 'input_directory.png' | relative_url }})

* Now we are ready to start the processors, in order to start the processors right click on the workspace and click start. Then we are are good to go. For our understanding i will start processors individually.

![]({{ 'input_processor_start.png' | relative_url }})

* So now we will see 100 items in the queue.

![]({{ 'quee100.png' | relative_url }})

* Now we will start **Put File Processor**.

![]({{ 'putoutput.png' | relative_url }})

* Finally now we will check  in the **Output Directory**.

![]({{ 'output_direcotry.png' | relative_url }})


So this how we will leverage **GetFile and PutFile Processors**  using **Apache NiFi**

Thanks,&lt;br&gt;
***Kartheek Gummaluri***</content><author><name></name></author><category term="APACHE" /><category term="NIFI" /><summary type="html">Apache NiFi GetFile and PutFile Processors Hi, In this post I’ll discuss on how to leverage Get and Put File Processors using Apache-NiFi</summary></entry><entry><title type="html">Convert Emojis to text and Emoticons to text using emot package</title><link href="http://localhost:4000/dev/2020/08/03/convert-emojis-to-text-and-emoticons-to-text-using-emot-package.html" rel="alternate" type="text/html" title="Convert Emojis to text and Emoticons to text using emot package" /><published>2020-08-03T17:47:06+05:30</published><updated>2020-08-03T17:47:06+05:30</updated><id>http://localhost:4000/dev/2020/08/03/convert-emojis-to-text-and-emoticons-to-text-using-emot-package</id><content type="html" xml:base="http://localhost:4000/dev/2020/08/03/convert-emojis-to-text-and-emoticons-to-text-using-emot-package.html">Here I will explain you how to convert emojis and emoticons to text.
```
data_path = &quot;D:/nlp/HelperCodes/&quot;
import sys
import re
import emot

sys.path.append(data_path)
from text_prep_config import UNICODE_EMO, EMOTICONS

def convert_emojis(text):
    for emot in UNICODE_EMO:
#        print(&quot;_&quot;.join(UNICODE_EMO[emot].replace(&quot;,&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;).split()))
        text = re.sub(r'(' + emot + ')', &quot;_&quot;.join(UNICODE_EMO[emot].replace(&quot;,&quot;, &quot;&quot;).replace(&quot;:&quot;, &quot;&quot;).split()), text)
    return text

def convert_emoticons(text):
    for emot in EMOTICONS:
        text = re.sub(u'('+emot+')', &quot;_&quot;.join(EMOTICONS[emot].replace(&quot;,&quot;,&quot;&quot;).split()), text)
    return text

def remove_emoji(string):
  emoji_pattern = re.compile(&quot;[&quot;
                       u&quot;\U0001F600-\U0001F64F&quot;  # emoticons
                       u&quot;\U0001F300-\U0001F5FF&quot;  # symbols &amp; pictographs
                       u&quot;\U0001F680-\U0001F6FF&quot;  # transport &amp; map symbols
                       u&quot;\U0001F1E0-\U0001F1FF&quot;  # flags (iOS)
                       u&quot;\U00002702-\U000027B0&quot;
                       u&quot;\U000024C2-\U0001F251&quot;
                       &quot;]+&quot;, flags=re.UNICODE)
  return emoji_pattern.sub(r'', string)

def remove_emoticons(text):
    emoticon_pattern = re.compile(u'(' + u'|'.join(k for k in EMOTICONS) + u')')
    return emoticon_pattern.sub(r'', text)

emoticons_text = &quot;Hello :-) :-)&quot;
emojis_text = &quot;Game is on 🔥&quot;

print(&quot;CONVERTING Emojis to Text:\n*\nInput: &quot; + emojis_text +  &quot;\n&quot;+ &quot;Output: &quot; + convert_emojis(emojis_text) + &quot;\n*&quot;)
print(&quot;CONVERTING Emoticons to Text:\n*\nInput: &quot; + emoticons_text +  &quot; \n&quot; + &quot;Output: &quot; + convert_emoticons(emoticons_text) + &quot;\n*&quot;)
print(&quot;Removing Emoticons in the Text:\n*\nInput: &quot; + emoticons_text +  &quot; \n&quot; + &quot;Output: &quot; + remove_emoticons(emoticons_text)+ &quot;\n*&quot;)
print(&quot;Removing  Emojis in the Text:\nInput: &quot; + emojis_text +  &quot; \n&quot; + &quot;Output: &quot; + remove_emoji(emojis_text))

#Now we will use emot package that is designed by NeelShah

print(emot.emoji(emojis_text))
print(emot.emoticons(emoticons_text))

for code in emot.UNICODE_EMO:
    print( code  + emot.UNICODE_EMO[code] + &quot;\n&quot;)
    
for code in emot.EMOTICONS:
    print( code  + &quot;=&quot; +  emot.EMOTICONS[code] + &quot;\n&quot;)**
```
So here we  wrote a method called **convert_emojis** where it will accept a string and you will get the text corresponding to emoji and here is the output.</content><author><name></name></author><category term="Dev" /><category term="Python" /><summary type="html">Here I will explain you how to convert emojis and emoticons to text. ``` data_path = “D:/nlp/HelperCodes/” import sys import re import emot</summary></entry><entry><title type="html">Introduction to “Did You Mean “ feature in ElasticSearch</title><link href="http://localhost:4000/2019/04/20/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Introduction to “Did You Mean “ feature in ElasticSearch" /><published>2019-04-20T13:12:15+05:30</published><updated>2019-04-20T13:12:15+05:30</updated><id>http://localhost:4000/2019/04/20/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/2019/04/20/welcome-to-jekyll.html">In this post I will explain you the different types of suggestors that elasticsearch is providing and I will give you brief about &quot;Completion Suggestor&quot;.

There are 4 types of suggestors
* Term Suggestor
* Phrase Suggestor
* Completion Suggestor
* Context Suggestor

So in recent times I have used a completion suggestor in one of my projects.The completion suggester provides auto-complete/search-as-you-type functionality. This is a navigational feature to guide users to relevant results as they are typing, improving search precision. It is not meant for spell correction or did-you-mean functionality like the term or phrase suggester

I will expalin with a small example in understand better and here is the sample mapping

```
curl -XPUT &quot;http://localhost:9200/sample&quot; -H 'Content-Type: application/json' -d'
{
  &quot;mappings&quot;: {
    &quot;doc&quot;: {
      &quot;properties&quot;: {
        &quot;namesuggest&quot;: {
          &quot;type&quot;: &quot;completion&quot;,
          &quot;analyzer&quot;: &quot;standard&quot;,
          &quot;preserve_separators&quot;: true,
          &quot;preserve_position_increments&quot;: true,
          &quot;max_input_length&quot;: 50
        },
        &quot;fullname&quot;: {
          &quot;type&quot;: &quot;text&quot;
        }
      }
    }
  }
}'
```

In the above mapping we defined completion suggestor and we have used standard analyzer,it provides grammar based tokenization (based on the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29) and works well for most languages.

Now we index few documents

```
PUT sample/doc/1?refresh
{
  &quot;namesuggest&quot;: [
    {
      &quot;input&quot;: &quot;Kartheek Gummaluri&quot;,
      &quot;weight&quot;: 10
    }
  ],
  &quot;fullname&quot;: &quot;Kartheek Gummaluri&quot;
}

PUT sample/doc/2?refresh
{
  &quot;namesuggest&quot;: [
    {
      &quot;input&quot;: &quot;Kiran Sangita&quot;,
      &quot;weight&quot;: 6
    }
  ],
  &quot;fullname&quot;: &quot;Kiran Sangita&quot;
}
```


So in the above document we have parameter called weight, so weight is used as relevancy tuning of search results.This helps us  which one needs to bubble up first.

Now we will write a sample query to get better idea

```
curl -XPOST &quot;http://localhost:9200/sample/_search?pretty&quot; -H 'Content-Type: application/json' -d'
{
  &quot;suggest&quot;: {
    &quot;namesuggest&quot;: {
      &quot;prefix&quot;: &quot;k&quot;,
      &quot;completion&quot;: {
        &quot;field&quot;: &quot;namesuggest&quot;
      }
    }
  }
}'
```

So based on the above documents document-1 needs to be bubble up first because it has a weight of 10 where as the document -2 as weight 9.It will bubble up second.Please find results below.

```
{
  &quot;took&quot; : 8,
  &quot;timed_out&quot; : false,
  &quot;_shards&quot; : {
    &quot;total&quot; : 5,
    &quot;successful&quot; : 5,
    &quot;skipped&quot; : 0,
    &quot;failed&quot; : 0
  },
  &quot;hits&quot; : {
    &quot;total&quot; : 0,
    &quot;max_score&quot; : 0.0,
    &quot;hits&quot; : [ ]
  },
  &quot;suggest&quot; : {
    &quot;namesuggest&quot; : [
      {
        &quot;text&quot; : &quot;k&quot;,
        &quot;offset&quot; : 0,
        &quot;length&quot; : 1,
        &quot;options&quot; : [
          {
            &quot;text&quot; : &quot;Kartheek Gummaluri&quot;,
            &quot;_index&quot; : &quot;sample&quot;,
            &quot;_type&quot; : &quot;doc&quot;,
            &quot;_id&quot; : &quot;1&quot;,
            &quot;_score&quot; : 10.0,
            &quot;_source&quot; : {
              &quot;namesuggest&quot; : [
                {
                  &quot;input&quot; : &quot;Kartheek Gummaluri&quot;,
                  &quot;weight&quot; : 10
                }
              ],
              &quot;fullname&quot; : &quot;Kartheek Gummaluri&quot;
            }
          },
          {
            &quot;text&quot; : &quot;Kiran Sangita&quot;,
            &quot;_index&quot; : &quot;sample&quot;,
            &quot;_type&quot; : &quot;doc&quot;,
            &quot;_id&quot; : &quot;2&quot;,
            &quot;_score&quot; : 6.0,
            &quot;_source&quot; : {
              &quot;namesuggest&quot; : [
                {
                  &quot;input&quot; : &quot;Kiran Sangita&quot;,
                  &quot;weight&quot; : 6
                }
              ],
              &quot;fullname&quot; : &quot;Kiran Sangita&quot;
            }
          }
        ]
      }
    ]
  }
}
```

Thanks and stay tuned for further updates.</content><author><name></name></author><category term="ELasticSearch" /><summary type="html">In this post I will explain you the different types of suggestors that elasticsearch is providing and I will give you brief about “Completion Suggestor”.</summary></entry></feed>